import type { Metadata } from "next";
import { notFound } from "next/navigation";
import localFont from "next/font/local";
import "./globals.css";

import { BrandProps, NavProps } from "@/types";

import ErrorBoundary from "@/components/layout/ErrorBoundary";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface NavItem {
  label: string;
  type: "link" | "dropdown";
  link?: { slug: string };
  dropdownItems?: Array<{ label: string; link: { slug: string } }>;
}

async function getNavigation(): Promise<NavProps> {
  try {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_PAYLOAD_URL}/api/globals/main-navigation`,
      { next: { revalidate: 60 } }
    );
    if (!res.ok) {
      throw new Error("Failed to fetch navigation data");
    }
    return res.json();
  } catch (error) {
    console.error(error);
    throw new Error("Failed to fetch navigation data");
  }
}

async function getBrandData(): Promise<BrandProps> {
  try {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_PAYLOAD_URL}/api/globals/brand`,
      { next: { revalidate: 60 } }
    );
    if (!res.ok) {
      throw new Error("Failed to fetch global config data");
    }
    return res.json();
  } catch (error) {
    console.error(error);
    throw new Error("Failed to fetch global config data");
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const navigation: NavProps = await getNavigation();
  const brand: BrandProps = await getBrandData();

  // console.log("Nav:", navigation);
  // console.log("Brand:", brand);

  if (!brand || !navigation) return notFound();

  return (
    <html lang="en">
      <body
        style={
          {
            "--brand-primary": brand.brandColors.primary,
            "--brand-secondary": brand.brandColors.secondary,
          } as React.CSSProperties
        }
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ErrorBoundary>
          <Header navigation={navigation} brand={brand} />
          {children}
          <Footer brand={brand} />
        </ErrorBoundary>
      </body>
    </html>
  );
}
